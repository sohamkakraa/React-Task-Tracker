{"ast":null,"code":"var _jsxFileName = \"/Users/sohamkakra/git/React-Task-Tracker/React Part/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from './Components/Header';\nimport Tasks from './Components/Tasks';\nimport AddTask from './Components/AddTask';\nimport Footer from './Components/Footer';\nimport About from './Components/About';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const taksFromServer = await fetchTasks();\n      setTasks(taksFromServer);\n    };\n\n    getTasks();\n  }, []); //Fetch Tasks\n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:8080/api/tasks/');\n    const data = await res.json();\n    return data;\n  }; //Fetch Task \n\n\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:8080/api/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  }; //Add Task\n\n\n  const addTask = async task => {\n    const res = await fetch('http://localhost:8080/api/tasks/', {\n      method: 'POST',\n      mode: 'no-cors',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]);\n  }; //Delete Task\n\n\n  const deleteTask = async id => {\n    await fetch(`http://localhost:8080/api/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  }; //Toggle Reminder\n\n\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle,\n      reminder: !taskToToggle.reminder\n    };\n    const res = await fetch(`http://localhost:8080/api/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: data.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onAdd: () => setShowAddTask(!showAddTask),\n        showAdd: showAddTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        render: props => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n            onAdd: addTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n            tasks: tasks,\n            onDelete: deleteTask,\n            onDoubleClick: toggleReminder\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 30\n          }, this) : 'No Tasks Available']\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        component: About\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sohamkakra/git/React-Task-Tracker/React Part/src/App.js"],"names":["Header","Tasks","AddTask","Footer","About","BrowserRouter","Router","Route","useState","useEffect","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","taksFromServer","fetchTasks","res","fetch","data","json","fetchTask","id","addTask","task","method","mode","headers","body","JSON","stringify","deleteTask","filter","toggleReminder","taskToToggle","updTask","reminder","map","props","length"],"mappings":"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","sourcesContent":["import Header from './Components/Header'\nimport Tasks from './Components/Tasks'\nimport AddTask from './Components/AddTask'\nimport Footer from './Components/Footer'\nimport About from './Components/About'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { useState, useEffect  } from 'react'\n\nconst App = () =>  { \n  const [showAddTask, setShowAddTask] = useState(false)\n\n  const [tasks, setTasks] = useState([]) \n\n  useEffect(() => {\n    const getTasks = async () => {\n      const taksFromServer = await fetchTasks()\n      setTasks(taksFromServer)\n    }\n\n    getTasks()\n  }, [])\n\n  //Fetch Tasks\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:8080/api/tasks/')\n    const data = await res.json()\n    return data\n  }\n\n  //Fetch Task \n  const fetchTask = async (id) => {\n    const res = await fetch(`http://localhost:8080/api/tasks/${id}`)\n    const data = await res.json()\n\n    return data\n  }\n\n  //Add Task\n  const addTask = async(task) => {\n    const res = await fetch('http://localhost:8080/api/tasks/', {\n      method: 'POST',\n      mode: 'no-cors',\n      headers: {\n        'Content-type' : 'application/json'\n      },\n      body: JSON.stringify(task)\n    })\n     \n    const data = await res.json()\n\n    setTasks([...tasks, data])\n  }\n\n  //Delete Task\n  const deleteTask = async (id) => {\n    await fetch(`http://localhost:8080/api/tasks/${id}`, { \n      method : 'DELETE'\n    })\n\n    setTasks(tasks.filter((task) => task.id !==id))\n  }\n\n  //Toggle Reminder\n  const toggleReminder = async (id) => {\n    const taskToToggle = await fetchTask(id)\n    const updTask = { ...taskToToggle, reminder: !taskToToggle.reminder }\n\n    const res = await fetch(`http://localhost:8080/api/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(updTask),\n    })\n\n    const data = await res.json()\n\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, reminder: data.reminder } : task\n      )\n    )\n  }\n\n  return (\n    <Router>\n    <div className=\"container\">\n      <Header onAdd = {() => setShowAddTask(!showAddTask)} showAdd = {showAddTask} />\n      <Route path = '/' exact render = {(props) => (\n        <>\n        {showAddTask && <AddTask onAdd = {addTask} />}\n        {tasks.length > 0 ? (<Tasks tasks = {tasks} onDelete = {deleteTask} onDoubleClick = {toggleReminder} />) : ('No Tasks Available')}\n        </>\n      )}  />\n      <Route path = '/about' component = {About} />\n      <Footer />\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}