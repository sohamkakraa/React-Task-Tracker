{"ast":null,"code":"var _jsxFileName = \"/Users/sohamkakra/react-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from './Components/Header';\nimport Tasks from './Components/Tasks';\nimport AddTask from './Components/AddTask';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const fetchTasks = async () => {};\n  }); //Add Task\n\n  const addTask = task => {\n    const id = Math.floor(Math.random() * 10000) + 1;\n    const newTask = {\n      id,\n      ...task\n    };\n    setTasks([...tasks, newTask]);\n  }; //Delete Task\n\n\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  }; //Toggle Reminder\n\n\n  const toggleRemainder = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask),\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 23\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onDoubleClick: toggleRemainder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 28\n    }, this) : 'No Tasks Available']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sohamkakra/react-task-tracker/src/App.js"],"names":["Header","Tasks","AddTask","useState","useEffect","App","showAddTask","setShowAddTask","tasks","setTasks","fetchTasks","addTask","task","id","Math","floor","random","newTask","deleteTask","filter","toggleRemainder","map","reminder","length"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAqC,OAArC;;;AAGA,MAAMC,GAAG,GAAG,MAAO;AAAA;;AACjB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,UAAU,GAAG,YAAY,CAE9B,CAFD;AAGD,GAJQ,CAAT,CALiB,CAWjB;;AACA,QAAMC,OAAO,GAAIC,IAAD,IAAU;AACxB,UAAMC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,IAAoC,CAA/C;AACA,UAAMC,OAAO,GAAG;AAAEJ,MAAAA,EAAF;AAAM,SAAGD;AAAT,KAAhB;AACAH,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWS,OAAX,CAAD,CAAR;AACD,GAJD,CAZiB,CAkBjB;;;AACA,QAAMC,UAAU,GAAIL,EAAD,IAAQ;AACzBJ,IAAAA,QAAQ,CAACD,KAAK,CAACW,MAAN,CAAcP,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAWA,EAAlC,CAAD,CAAR;AACD,GAFD,CAnBiB,CAuBjB;;;AACA,QAAMO,eAAe,GAAIP,EAAD,IAAQ;AAC9BJ,IAAAA,QAAQ,CAACD,KAAK,CAACa,GAAN,CAAWT,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAZ,GAAiB,EAAE,GAAGD,IAAL;AAAYU,MAAAA,QAAQ,EAAE,CAACV,IAAI,CAACU;AAA5B,KAAjB,GAAyDV,IAA7E,CAAD,CAAR;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAI,MAAML,cAAc,CAAC,CAACD,WAAF,CAArC;AAAqD,MAAA,OAAO,EAAIA;AAAhE;AAAA;AAAA;AAAA;AAAA,YADF,EAEGA,WAAW,iBAAI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAIK;AAAlB;AAAA;AAAA;AAAA;AAAA,YAFlB,EAGGH,KAAK,CAACe,MAAN,GAAe,CAAf,gBAAoB,QAAC,KAAD;AAAO,MAAA,KAAK,EAAIf,KAAhB;AAAuB,MAAA,QAAQ,EAAIU,UAAnC;AAA+C,MAAA,aAAa,EAAIE;AAAhE;AAAA;AAAA;AAAA;AAAA,YAApB,GAA4G,oBAH/G;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAnCD;;GAAMf,G;;KAAAA,G;AAqCN,eAAeA,GAAf","sourcesContent":["import Header from './Components/Header'\nimport Tasks from './Components/Tasks'\nimport AddTask from './Components/AddTask'\nimport { useState, useEffect  } from 'react'\n\n\nconst App = () =>  { \n  const [showAddTask, setShowAddTask] = useState(false)\n\n  const [tasks, setTasks] = useState([]) \n\n  useEffect(() => {\n    const fetchTasks = async () => {\n\n    }\n  })\n\n  //Add Task\n  const addTask = (task) => {\n    const id = Math.floor(Math.random() * 10000) + 1\n    const newTask = { id, ...task }\n    setTasks([...tasks, newTask])\n  }\n\n  //Delete Task\n  const deleteTask = (id) => {\n    setTasks(tasks.filter((task) => task.id !==id))\n  }\n\n  //Toggle Reminder\n  const toggleRemainder = (id) => {\n    setTasks(tasks.map((task) => task.id === id ? { ...task , reminder: !task.reminder} : task))\n  }\n\n  return (\n    <div className=\"container\">\n      <Header onAdd = {() => setShowAddTask(!showAddTask)} showAdd = {showAddTask} />\n      {showAddTask && <AddTask onAdd = {addTask} />}\n      {tasks.length > 0 ? (<Tasks tasks = {tasks} onDelete = {deleteTask} onDoubleClick = {toggleRemainder} />) : ('No Tasks Available')}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}