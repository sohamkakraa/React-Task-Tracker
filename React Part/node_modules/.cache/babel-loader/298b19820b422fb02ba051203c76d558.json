{"ast":null,"code":"var _jsxFileName = \"/Users/sohamkakra/react-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from './Components/Header';\nimport Tasks from './Components/Tasks';\nimport AddTask from './Components/AddTask';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const taksFromServer = await fetchTasks();\n      setTasks(taksFromServer);\n    };\n\n    getTasks();\n  }, []); //Fetch Tasks\n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks');\n    const data = await res.json();\n    return data;\n  }; //Fetch Task \n\n\n  const fetchTask = async () => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  }; //Add Task\n\n\n  const addTask = async task => {\n    const res = await fetch('http://localhost:5000/tasks/', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]);\n  }; // const id = Math.floor(Math.random() * 10000) + 1\n  // const newTask = { id, ...task }\n  //setTasks([...tasks, newTask])\n  //Delete Task\n\n\n  const deleteTask = async id => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  }; //Toggle Reminder\n\n\n  const toggleRemainder = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask),\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 23\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onDoubleClick: toggleRemainder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 28\n    }, this) : 'No Tasks Available']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sohamkakra/react-task-tracker/src/App.js"],"names":["Header","Tasks","AddTask","useState","useEffect","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","taksFromServer","fetchTasks","res","fetch","data","json","fetchTask","id","addTask","task","method","headers","body","JSON","stringify","deleteTask","filter","toggleRemainder","map","reminder","length"],"mappings":"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","sourcesContent":["import Header from './Components/Header'\nimport Tasks from './Components/Tasks'\nimport AddTask from './Components/AddTask'\nimport { useState, useEffect  } from 'react'\n\n\nconst App = () =>  { \n  const [showAddTask, setShowAddTask] = useState(false)\n\n  const [tasks, setTasks] = useState([]) \n\n  useEffect(() => {\n    const getTasks = async () => {\n      const taksFromServer = await fetchTasks()\n      setTasks(taksFromServer)\n    }\n\n    getTasks()\n  }, [])\n\n  //Fetch Tasks\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks')\n    const data = await res.json()\n\n    return data\n  }\n\n  //Fetch Task \n  const fetchTask = async () => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`)\n    const data = await res.json()\n\n    return data\n  }\n\n  //Add Task\n  const addTask = async(task) => {\n    const res = await fetch('http://localhost:5000/tasks/', {\n      method: 'POST',\n      headers: {\n        'Content-type' : 'application/json'\n      },\n      body: JSON.stringify(task)\n    })\n     \n    const data = await res.json()\n\n    setTasks([...tasks, data])\n  }\n    // const id = Math.floor(Math.random() * 10000) + 1\n    // const newTask = { id, ...task }\n    //setTasks([...tasks, newTask])\n\n  \n\n  //Delete Task\n  const deleteTask = async (id) => {\n    await fetch(`http://localhost:5000/tasks/${id}`, { method : 'DELETE'})\n\n    setTasks(tasks.filter((task) => task.id !==id))\n  }\n\n  //Toggle Reminder\n  const toggleRemainder = (id) => {\n    setTasks(tasks.map((task) => task.id === id ? { ...task , reminder: !task.reminder} : task))\n  }\n\n  return (\n    <div className=\"container\">\n      <Header onAdd = {() => setShowAddTask(!showAddTask)} showAdd = {showAddTask} />\n      {showAddTask && <AddTask onAdd = {addTask} />}\n      {tasks.length > 0 ? (<Tasks tasks = {tasks} onDelete = {deleteTask} onDoubleClick = {toggleRemainder} />) : ('No Tasks Available')}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}